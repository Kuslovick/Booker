from data import * 
from keyboard import *
from aiogram import executor, types
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import bot, dp, FSMDistribution, FSMAddWell, FSMDelWell, FSMContext, admin


scheduler = AsyncIOScheduler()
scheduler.add_job(PriceWellsData, 'interval', minute=30)


@dp.message_handler(commands='start')
async def Start(message: types.Message):
    RegisterData(message.chat.id)
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup=StartKeyBoard())


@dp.message_handler(user_id=admin, commands='admin')
async def Admin(message: types.Message):
    await message.answer('–í—ã –ø–æ–ø–∞–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞!', reply_markup=AdminKeyBoard())


@dp.message_handler(lambda message: message.text == '–î—Ä—É–≥–æ–µüóÑ')
async def Other(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª', reply_markup=OtherKeyBoard())


@dp.message_handler(lambda message: message.text == '–ö—É—Ä—Å –í–∞–ª—é—Çüìà')
async def Other(message: types.Message):
    await bot.send_message(message.chat.id, f'–ö—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n\n{WellsData()}', disable_web_page_preview=True)


@dp.message_handler(lambda message: message.text == '–†–∞—Å—Å—ã–ª–∫–∞üó£')
async def Distribution(message: types.Message):
    if message.chat.id == admin:
        await FSMDistribution.Text.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')


@dp.message_handler(state=FSMDistribution.Text)
async def DistributionText(message: types.Message, state: FSMContext):
    async with state.proxy():
        dist = message.text

    if dist != '–†–∞—Å—Å—ã–ª–∫–∞üó£':
        for res in UsersData():
            try:
                await bot.send_message(res[0], dist)
            except:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {res[0]}")

    else:
        await message.answer('–û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ')

    await state.finish()


@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É‚ûï')
async def NewWell(message: types.Message):
    if message.chat.id == admin:
        await FSMAddWell.Code.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã')
    

@dp.message_handler(state=FSMAddWell.Code)
async def WellCode(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['code'] = message.text

    await FSMAddWell.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ª—é—Ç—ã')

@dp.message_handler(state=FSMAddWell.Name)
async def WellCode(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await FSMAddWell.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–æ–ª—é—Ç—É')


@dp.message_handler(state=FSMAddWell.Url)
async def WellUrl(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['url'] = message.text

    await message.answer(f"{AddWellData(data['code'], data['name'], data['url'])}")

    await state.finish()
    

@dp.message_handler(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É‚ûñ')
async def NewWell(message: types.Message):
    if message.chat.id == admin:
        await FSMDelWell.Code.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã')


@dp.message_handler(state=FSMDelWell.Code)
async def DelWellCode(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['code'] = message.text

    await message.answer(f"{DelWellData(data['code'])}")
    await state.finish()


if __name__ == '__main__':
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
   