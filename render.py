from aiogram.dispatcher import FSMContext
from config import dp, bot, admin, FSM
from data import *
from keyboard import *


def New(dispatcher: dp):
    dispatcher.message_handler(commands=['start'])


@dp.message_handler(commands=['admin'])
async def Admin(message: types.Message):
    if message.chat.type == 'private':
        if message.chat.id == admin:
            await message.answer('–í—ã –ø–æ–ø–∞–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=AdminKeyboards())


@dp.callback_query_handler(text='distribution')
async def Distribution(callback: types.CallbackQuery):
    await FSM.description.set()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')


@dp.message_handler(state=FSM.description)
async def AllSend(message: types.Message, state=FSMContext):
    Users = AllUsers()
    for res in range(len(Users)):
        await bot.send_message(Users[res][0], message.text)
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', reply_markup=AdminKeyboards())
        await state.finish()


@dp.callback_query_handler(text='out')
async def AdminOut(callback: types.CallbackQuery):
    if callback.message.chat.id == admin:
        await callback.message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=StartKeyboard())


@dp.message_handler(commands=['start'])
async def Start(message: types.Message):
    await message.answer(f'{UserRegister(message.chat.id)}', reply_markup=StartKeyboard())


@dp.message_handler(lambda message: message.text == '–î–µ–Ω—å–≥–∏üí≤')
async def Money(message: types.Message):
    await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n\n{UserMoney(message.chat.id)}', reply_markup=UserBalance())


@dp.callback_query_handler(text='profit')
async def Profit(callback: types.CallbackQuery):
    await FSM.profit.set()
    await callback.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–Ω–µ–≥ —á—Ç–æ –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏')


@dp.message_handler(state=FSM.profit)
async def ProfitState(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        try:
            data['profit'] = int(message.text)
            UserProfit(message.chat.id, int(data['profit']))
            await message.answer('–ì–æ—Ç–æ–≤–æ')

        except ValueError:
            await message.answer('–û—à–∏–±–∫–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')

    await state.finish()


@dp.callback_query_handler(text='expense')
async def Expense(callback: types.CallbackQuery):
    await FSM.expense.set()
    await callback.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–Ω–µ–≥ —á—Ç–æ –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏')


@dp.message_handler(state=FSM.expense)
async def ExpenseState(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        try:
            data['expense'] = int(message.text)
            UserProfit(message.chat.id, int(data['expense']))
            await message.answer('–ì–æ—Ç–æ–≤–æ')

        except ValueError:
            await message.answer('–û—à–∏–±–∫–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')

    await state.finish()


@dp.message_handler(lambda message: message.text == '–ü—Ä–æ—á–µ–µüìÅ')
async def Settings(message: types.Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup=UserSettings())


@dp.callback_query_handler(text='salary')
async def Salary(callback: types.CallbackQuery):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞')


@dp.callback_query_handler(text='state')
async def State(callback: types.CallbackQuery):
    await callback.message.answer(f'–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n{UserState(callback.message.chat.id)}')


@dp.message_handler(lambda message: message.text == '–ü–æ–º–æ—â—åüë®‚Äçüíª')
async def About(message: types.Message):
    await message.answer('–ü–æ–º–æ—â—å\n\n https://t.me/kuslovick')
